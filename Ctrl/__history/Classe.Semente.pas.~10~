unit Classe.Semente;

interface
uses
  System.SysUtils, Classe.Functions, Classe.FunctionsCrud,Classe.FunctionsSQL,
  Classe.Conexao, Vcl.Forms, JvDBUltimGrid, System.Classes, System.Variants,
  Graphics, Vcl.WinXPanels, System.Math, JvDesktopAlert, Classe.Sistema.Mensagens,
  Vcl.Dialogs, JvCombobox, FireDAC.Comp.Client, Data.DB, System.UITypes,
  Vcl.StdCtrls, Winapi.Windows, Vcl.DBGrids, Vcl.Grids;

type
        TSemente = Class

        private

        Frm             : TForm;
        Dbgrd           : TJvDBUltimGrid;
        Table           : string;
        IDKey           : string;
        IDKeyVaue       : string;
        IDKeyFilter     : string;
        NCampos         : Integer;
        InsUpd          : string;
        FAlert          : string;

        FNomeSemente    : string;

        public

        constructor CreateObjTSemente;
        destructor  DestroyObjTSemente;

        procedure setNomeSemente (pNomeSemente : string);
        procedure setAlert        ( pAlert         : string);
        function  getNomeSemente : string;
        function getAlert         : string;


        procedure setPesquisaCampo(Campo: string; Key: string);
        procedure setAcaoAdicionarEditar(ActInsUpd: string);
        procedure setFrmOnShow;
        procedure setDelete;
        function  getSavar: Boolean;
        function  getCancelar: Boolean;
End;

implementation

uses
     UFrmCadastroSemente;

{ TSemente }

constructor TSemente.CreateObjTSemente;
begin
        FNomeSemente := EmptyStr;

        Frm         := FrmCadastroSemente;
        Dbgrd       := FrmCadastroSemente.DbGrid;
        Table       := 'semente';
        IDKey       := ' smt_Id = ';
        IDKeyVaue   := 'smt_Id';
        IDKeyFilter := 'smt_descricao LIKE ';
        NCampos     := 1;
        InsUpd      := EmptyStr;
end;

destructor TSemente.DestroyObjTSemente;
begin
        TSemente.Destroy;
end;

function TSemente.getAlert: string;
begin
     Result := FAlert;
end;

function TSemente.getCancelar: Boolean;
begin
        Result := fEventoCancelar(Frm, Dbgrd, Table, IDKeyVaue, NCampos);
        plimpaDadosInterface(Frm, 1);
        setFrmOnShow;
end;

function TSemente.getNomeSemente: string;
begin
        Result  :=      FNomeSemente;
end;

function TSemente.getSavar: Boolean;
var
      VlrKeyUpd : Integer;
begin
      VlrKeyUpd := 0;

              if (InsUpd = 'INSERT') then
               begin
                setAlert('Registro inserido com sucesso! ');
                Result := fEventoSalvar(InsUpd, Frm, Dbgrd, Table, IDKey, IDKeyVaue, NCampos);

               end else if (InsUpd = 'UPDATE') then begin
                setAlert('Registro alterado com sucesso! ');
                VlrKeyUpd := Dbgrd.DataSource.DataSet.FieldByName(IDKeyVaue).AsInteger;
                Result := fEventoSalvar(InsUpd, Frm, Dbgrd, Table, IDKey, IntToStr(VlrKeyUpd), NCampos);

              end;
                plimpaDadosInterface(Frm, 1);
                Result := True;

end;

procedure TSemente.setAcaoAdicionarEditar(ActInsUpd: string);
begin
        if ActInsUpd = 'INSERT' then
        begin
            InsUpd := fEventoInsUpdDel(ActInsUpd, Frm, Dbgrd, Table, IDKey, IDKeyVaue, NCampos);

        end
        else if ActInsUpd = 'UPDATE' then
        begin
            InsUpd := fEventoInsUpdDel(ActInsUpd, Frm, Dbgrd, Table, IDKeyVaue,IDKey, NCampos);
            pCarregaDadosInterface(Frm);
        end;
end;

procedure TSemente.setAlert(pAlert: string);
begin
        FAlert  :=      pAlert;
end;

procedure TSemente.setDelete;
var
      VlrKeyDel : Integer;
begin
      VlrKeyDel := Dbgrd.DataSource.DataSet.FieldByName(IDKeyVaue).AsInteger;
      fEventoInsUpdDel('DELETE',Frm,Dbgrd,Table,IDKeyVaue,IDKey,(VlrKeyDel));
      pAtivarDBGrid(Dbgrd);
      setAlert('Registro excluído com sucesso! ');
end;

procedure TSemente.setFrmOnShow;
begin
      pCarregarBancoDado(0, Table, IDKey, NCampos);
      Dbgrd.DataSource := DMPrincipal.DsCmdSql_1;
      pAtivarDBGrid(Dbgrd);
end;

procedure TSemente.setNomeSemente(pNomeSemente: string);
begin
        FNomeSemente    :=      pNomeSemente;
end;

procedure TSemente.setPesquisaCampo(Campo, Key: string);
var
  VlrBusca: string;
begin
  VlrBusca := EmptyStr;
  if Key = '13' then
  begin
    if FrmCadastroSemente.RbConsBasica.Checked then
    begin
      VlrBusca := '%' + Campo;
    end
    else if FrmCadastroSemente.RbConsFull.Checked then
    begin
      VlrBusca := '%' + Campo + '%';
    end
    else
    begin
      VlrBusca := Campo;
    end;

    fEventoConsultaQuery(VlrBusca, Table, IDKeyFilter, IDKeyVaue, NCampos);
    pAtivarDBGrid(Dbgrd);
  end;

end;

end.
