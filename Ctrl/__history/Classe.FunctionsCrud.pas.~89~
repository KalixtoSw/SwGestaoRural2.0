unit Classe.FunctionsCrud;

interface

uses
     Classe.FunctionsSQL, Classe.Functions, System.SysUtils, Vcl.Forms,
  Vcl.Mask, Vcl.WinXCalendars, JvBaseEdits, Vcl.StdCtrls, Vcl.Graphics,
  System.Variants,JvCombobox, JvDBUltimGrid, Vcl.WinXPanels, JvPanel,
  Vcl.Dialogs;
{-------------BLOCO DE FUNÇÕES-------------------------------------------------}
     function fEventoCancelar(FrmPadrao : TForm;Dbgrd : TJvDBUltimGrid; Tb : String; iDkey : String; Ncampos : Integer): Boolean;{1}
     function fEventoSalvar(TpActSql : string;FrmPadrao : Tform;Dbgrd : TJvDBUltimGrid; Tb : String;IdPan : string; IdKey : String; NCampos : Integer): Boolean;{2}
     function fEventoInsUpdDel(UD : String; FrmPadrao : Tform; Dbgrd : TJvDBUltimGrid; Tb : String; iD : String;iDkey : String; NCampos : Integer): String;{3}
     function fEventoConsultaQuery(VlrEntrada : String;Tabela : String; CondSql : string;IdKey : String;NCampos : Integer): string;{4}
     function fCamposObrigatorios(Form : TForm): Boolean;{5}

{------------------------------------------------------------------------------}
{-------------BLOCO DE PROCEDURES----------------------------------------------}
     procedure pCarregaDadosInterface(Form : TForm);{1}
     procedure plimpaDadosInterface(Form : TForm;TpClear : Integer);{2}
     procedure pCarregarDadosArray(Form : TForm);{3}
     procedure pCarregarBancoDado(IdDefault : Integer;  Tabela: String; IdKey : String;NCampos : Integer);{4}
{------------------------------------------------------------------------------}

implementation

uses
     Classe.Conexao, Classe.Sistema.Mensagens;

function fEventoCancelar(FrmPadrao : TForm;Dbgrd : TJvDBUltimGrid; Tb : String; iDkey : String; Ncampos : Integer): Boolean;{Evento base do Botão Cancelar (pr_BtCancel)}
begin
      try
            pCarregarBancoDado(0,tb,iDkey,Ncampos);
            pAtivarDBGrid(Dbgrd);
            pQueryExecute(5,fMontaInsUpd('','',tb,Ncampos)[5],DMPrincipal.CmdSql_1);
            plimpaDadosInterface(FrmPadrao,2);
      Result := True;
      except on E: Exception do

      Result:= False;
      end;
end;

function fEventoSalvar(TpActSql : string;FrmPadrao : Tform;Dbgrd : TJvDBUltimGrid; Tb : String;IdPan : string; IdKey : String; NCampos : Integer): Boolean;{Evento base do botão Salvar (pr_BtSave)}
begin
      try

      pCarregarDadosArray(FrmPadrao);

      if (NOT(fCamposObrigatorios(FrmPadrao))) then
      begin
              fMsgPadrao(8,1,6,2);
      end
      else
       Begin
        try
        if TpActSql = 'UPDATE' then
        begin
            pQueryExecute(2,fMontaInsUpd('',''+IdPan+IdKey+'',Tb,NCampos)[2],DMPrincipal.CmdSql_1);
            fEventoCancelar(FrmPadrao,Dbgrd,Tb,IdKey,NCampos);
            Result := True;

        end else if TpActSql = 'INSERT' then
               begin
                   pQueryExecute(1,fMontaInsUpd('','',Tb,NCampos)[1],DMPrincipal.CmdSql_1);
                   fEventoCancelar(FrmPadrao,Dbgrd,Tb,IdKey,NCampos);
                   Result := True;
               end;
        Except

        end;

      End;


      except on E: Exception do

      Result:= False;
      end;
end;

function fEventoInsUpdDel(UD : String;FrmPadrao : Tform; Dbgrd : TJvDBUltimGrid; Tb : String; iD : String;iDkey : String; NCampos : Integer): String;{Eventos Bases de Edição ou Exclusão (fn_ActUpdateDelete)}
begin
        Result := UD;

        if UD = 'UPDATE' then
        begin
                pCarregarBancoDado(Dbgrd.DataSource.DataSet.FieldByName(iD).AsInteger,Tb,iDkey,NCampos);

        End else if UD = 'DELETE' then begin

                pQueryExecute(4, fMontaInsUpd('',iDkey+IntToStr(NCampos),Tb,0)[4], DMPrincipal.CmdSql_1);
                pCarregarBancoDado(0,Tb,iDkey,NCampos);

        end else if UD = 'INSERT' then
                  begin
                        plimpaDadosInterface(FrmPadrao,1);
                        pEditSetFocus(FrmPadrao,5);
                  end;


end;

function fEventoConsultaQuery(VlrEntrada : String;Tabela : String; CondSql : string;IdKey : String;NCampos : Integer): string;{Eventos Bases de busca sql (fn_SearchDbGrid)}
begin
       try
       Result := EmptyStr;


        pQueryExecute(3, fMontaInsUpd('',(CondSql)+QuotedStr(VlrEntrada),Tabela,NCampos)[3], DMPrincipal.CmdSql_1);

        Result := DMPrincipal.DsCmdSql_1.DataSet.FieldByName((IdKey)).AsString;

        if Result = EmptyStr then
        begin
              Result := 'Não foi encontrados registros nessa consulta';
        end;


      except on E: Exception do


      end;
end;

function fCamposObrigatorios(Form : TForm): Boolean;{fFieldsRequerids}
Var
        I : Integer;
Begin
        Result := True;
        for I := 0 to form.ComponentCount - 1 do
        begin
            if Form.Components[I].Tag > 0 then
            Begin
                if form.Components[I] is TMaskEdit then
                begin
                        if (Copy((form.Components[I] as TMaskEdit).Name,1,3) = 'Obr' ) then
                        Begin
                            if fCheckEmptyText((form.Components[I] as TMaskEdit).EditMask,(form.Components[I] as TMaskEdit).Text) then
                            begin

                                (form.Components[I] as TMaskEdit).Color := clRed;
                                 Result := False;

                            end;
                        End;
                end;
                if form.Components[I] is TCalendarPicker then
                begin
                        if (Copy((form.Components[I] as TCalendarPicker).Name,1,3) = 'Obr' ) then
                        Begin
                            if ((form.Components[I] as TCalendarPicker).Date) = null then
                            begin
                                (form.Components[I] as TCalendarPicker).Color := clRed;
                                 Result := False;
                            end;
                        End;
                end;
                if form.Components[I] is TJvCalcEdit then
                begin
                        if (Copy((form.Components[I] as TJvCalcEdit).Name,1,3) = 'Obr' ) then
                        Begin
                            if (form.Components[I] as TJvCalcEdit).Value = 0 then
                            begin
                                (form.Components[I] as TJvCalcEdit).Color := clRed;
                                 Result := False;
                            end;
                        End;
                end;
                if form.Components[I] is TComboBox then
                begin
                        if (Copy((form.Components[I] as TComboBox).Name,1,3) = 'Obr' ) then
                        Begin
                            if (form.Components[I] as TComboBox).text = EmptyStr then
                            begin
                                (form.Components[I] as TComboBox).Color := clRed;
                                 Result := False;
                            end;
                        End;
                end;
            End;
        end;
End;

procedure pCarregarDadosArray(Form : TForm);{fn_ArrayfieldsTable}
Var
        I : Integer;
Begin

        for I := 0 to form.ComponentCount - 1 do
        begin
            if Form.Components[I].Tag > 0 then
            Begin
                if form.Components[I] is TMaskEdit then
                begin
                    if ((form.Components[I] as TMaskEdit).HelpKeyword = EmptyStr) then
                    begin

                        FieldsValues[(form.Components[I] as TMaskEdit).Tag]  := QuotedStr((form.Components[I] as TMaskEdit).Text);
                        FieldsDB[(form.Components[I] as TMaskEdit).Tag]      := (form.Components[I] as TMaskEdit).Hint;

                    end else begin

                          FieldsValues[(form.Components[I] as TMaskEdit).Tag]  := QuotedStr((form.Components[I] as TMaskEdit).HelpKeyword);
                          FieldsDB[(form.Components[I] as TMaskEdit).Tag]      := (form.Components[I] as TMaskEdit).Hint;
                    end;
                end;
                if form.Components[I] is TCalendarPicker then
                begin
                    if ((form.Components[I] as TCalendarPicker).HelpKeyword = EmptyStr) then
                    begin

                        FieldsValues[(form.Components[I] as TCalendarPicker).Tag]  := QuotedStr(FormatDateTime('yyyy-mm-dd',(form.Components[I] as TCalendarPicker).date));
                        FieldsDB[(form.Components[I] as TCalendarPicker).Tag]      := (form.Components[I] as TCalendarPicker).Hint;
                    end;
                end;
                  if form.Components[I] is TJvCalcEdit then
                    begin
                    if ((form.Components[I] as TJvCalcEdit).HelpKeyword = EmptyStr) then
                    begin
                        FieldsValues[(form.Components[I] as TJvCalcEdit).Tag]  := fTrocaVirgPPto( FloatToStr((form.Components[I] as TJvCalcEdit).Value) );
                        FieldsDB[(form.Components[I] as TJvCalcEdit).Tag]      := (form.Components[I] as TJvCalcEdit).Hint;
                    end;
                   End;
                  if form.Components[I] is TComboBox then
                    begin
                    if ((form.Components[I] as TComboBox).HelpKeyword = EmptyStr) then
                    begin
                        FieldsValues[(form.Components[I] as TComboBox).Tag]  := QuotedStr((form.Components[I] as TComboBox).text);
                        FieldsDB[(form.Components[I] as TComboBox).Tag]      := (form.Components[I] as TComboBox).Hint;
                    end;
                  End;
                  if form.Components[I] is TJvComboBox then
                    begin
                    if ((form.Components[I] as TJvComboBox).HelpKeyword = EmptyStr) then
                    begin
                        FieldsValues[(form.Components[I] as TJvComboBox).Tag]  := QuotedStr((form.Components[I] as TJvComboBox).text);
                        FieldsDB[(form.Components[I] as TJvComboBox).Tag]      := (form.Components[I] as TJvComboBox).Hint;
                    end else
                        begin
                             FieldsValues[(form.Components[I] as TJvComboBox).Tag]  := IntToStr(fRetVlrCombox((form.Components[I] as TJvComboBox),0).IdResp);
                             FieldsDB[(form.Components[I] as TJvComboBox).Tag]      := (form.Components[I] as TJvComboBox).Hint;
                        end;
                  End;
            End;
        end;

End;

procedure pCarregaDadosInterface(Form : TForm);{fn_loadfieldsInterface}
Var
        I : Integer;
Begin
        for I := 0 to form.ComponentCount - 1 do
        begin
            if Form.Components[I].Tag > 0 then
            Begin

                if (form.Components[I] is TMaskEdit)  then
                begin
                      (form.Components[I] as TMaskEdit).Text :=  DMPrincipal.DsCmdSql_1.DataSet.FieldByName(((form.Components[I] as TMaskEdit).Hint)).AsString;
                end;
                if (form.Components[I] is TCalendarPicker) then
                begin
                     (form.Components[I] as TCalendarPicker).Date := StrToDate((FormatDateTime('dd/mm/yyyy',DMPrincipal.DsCmdSql_1.DataSet.FieldByName(((form.Components[I] as TCalendarPicker).Hint)).AsDateTime)));
                end;
                if (form.Components[I] is TJvCalcEdit) then
                begin
                     (form.Components[I] as TJvCalcEdit).Value := DMPrincipal.DsCmdSql_1.DataSet.FieldByName(((form.Components[I] as TJvCalcEdit).Hint)).AsFloat;
                end;
                if (form.Components[I] is TComboBox)  then
                begin
                      (form.Components[I] as TComboBox).Text :=  DMPrincipal.DsCmdSql_1.DataSet.FieldByName(((form.Components[I] as TComboBox).Hint)).AsString;
                end;
                if (form.Components[I] is TJvComboBox)  then
                begin
                      (form.Components[I] as TJvComboBox).ItemIndex := Form.Tag-1;
                end;
            End;
        end;
End;

procedure plimpaDadosInterface(Form : TForm;TpClear : Integer);{fn_clearfieldsTable}
Var
        I : Integer;
Begin

        for I := 0 to form.ComponentCount - 1 do
        begin
            if Form.Components[I].Tag > 0 then
            Begin
                if form.Components[I] is TMaskEdit then
                begin
                        case TpClear of
                            1: (form.Components[I] as TMaskEdit).Text    :=  EmptyStr;
                            2: (form.Components[I] as TMaskEdit).color   :=  clWhite;
                        end;
                end;

                if form.Components[I] is TCalendarPicker then
                begin
                        case TpClear of
                            1: (form.Components[I] as TCalendarPicker).Date    :=  null;
                            2: (form.Components[I] as TCalendarPicker).color   :=  clWhite;
                        end;
                end;

                if form.Components[I] is TJvCalcEdit then
                begin
                        case TpClear of
                            1: (form.Components[I] as TJvCalcEdit).Value    :=  0;
                            2: (form.Components[I] as TJvCalcEdit).color    :=  clWhite;
                        end;
                end;

                if form.Components[I] is TComboBox then
                begin
                        case TpClear of
                            1: (form.Components[I] as TComboBox).Text    :=  EmptyStr;
                            2: (form.Components[I] as TComboBox).color   :=  clWhite;
                        end;
                end;
                if form.Components[I] is TJvComboBox then
                begin
                        case TpClear of
                            1: (form.Components[I] as TJvComboBox).Text    :=  EmptyStr;
                            2: (form.Components[I] as TJvComboBox).color   :=  clWhite;
                        end;
                end;

            End;
        end;
End;

procedure pCarregarBancoDado(IdDefault : Integer;  Tabela: String; IdKey : String;NCampos : Integer);{fn_loadDatabase}
Var
   Fields : string;
   where : String;
begin
        where   := '';
        Fields  := EmptyStr;

        if Not(IdDefault = 0) then
        begin

              where := IdKey + IntToStr(IdDefault)+'';

        end else Begin

              where := EmptyStr;
        end;
        pQueryExecute(3, fMontaInsUpd(Fields,where,Tabela,NCampos)[3], DMPrincipal.CmdSql_1);
end;

end.

